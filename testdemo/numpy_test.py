import numpy as np

print('=================================')
print('算数运算')
print('=================================')
A = np.array([1, 2, 3, 4, 5])
B = np.array([1, 2, 3, 4, 5])
print('A+B = ', np.add(A, B))
print('A-B = ', np.subtract(A, B))
print('A*B = ', np.multiply(A, B))
print('A/B = ', np.divide(A, B))
print('幂：', np.power(A, B))
B = np.array([1, 2., 2, 4, 4])
print('取余', np.mod(A, B))
print('取余', np.remainder(A, B))
print('倒数', np.reciprocal(B))

print('=================================')
print('统计函数（axis：0列，1行）')
print('=================================')
A = np.array([[1, 2, 3, 4, 5], [6, 7, 8, 9, 0]])
print('0轴上最小的值：', np.amin(A, axis=0))
print('1轴上最小的值：', np.amin(A, axis=1))
print('0轴上最大的值：', np.amax(A, axis=0))
print('1轴上最大的值：', np.amax(A, axis=1))
print('0轴最大差值绝对值：', np.ptp(A, axis=0))
print('1轴最大差值绝对值：', np.ptp(A, axis=1))
print('0轴25%处的值为：', np.percentile(A, 25, axis=0))
print('1轴25%处的值为：', np.percentile(A, 25, axis=1))
print('0轴中值为：', np.median(A, axis=0))
print('1轴中值为：', np.median(A, axis=1))
print('0轴平均值为：', np.mean(A, axis=0))
print('1轴平均值为：', np.mean(A, axis=1))
print('0轴加权平均值为：', np.average(A, axis=0, weights=np.array([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])))
print('1轴加权平均值为：', np.average(A, axis=1, weights=np.array([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1]])))
print('0轴标准差为：', np.std(A, axis=0))
print('1轴标准差为：', np.std(A, axis=1))
print('0轴方差为：', np.var(A, axis=0))

print('=================================')
print('排序、搜索和计数函数')
print('=================================')
A = np.array([4, 7, 2, 8, 23, 6, 3, 2, 1, 7, 4, 2])
B = np.sort(A, kind='quicksort')
print('快速排序：', B)
B = np.sort(A, kind='mergesort')
print('归并排序：', B)
B = np.sort(A, kind='heapsort')
print('堆排序：', B)
B = np.argsort(A)
print('索引数组：', B)
A = np.array([6, 5, 2, 7, 1, 4, 3])
C = np.array([4, 3, 1, 6, 8, 0, 9])
B = np.lexsort((A, C))  # 先按照C排序，相同序列位再按A排序
print('键序列：', B)
print(C[B])
B = np.argmax(A)
print('最大值的索引：', B)
B = np.argmin(A)
print('最小值的索引：', B)
B = np.nonzero(A)
print('非零元素的索引：', B)
B = np.where(A > 3)
print('满足给定条件的元素的索引：', B)
B = np.extract(A > 3, A)
print('满足条件的元素：', B)

print('=================================')
print('矩阵库')
print('=================================')
A = np.empty([3, 4])
B = np.ones([3, 4])
C = np.eye(3, 4)
D = np.identity(4)
E = np.zeros([3, 4])
F = np.random.rand(3, 4)
G = np.random.randn(3, 4)
print('一个矩阵：', A)
print('1填充的矩阵：', B)
print('单位矩阵：', C)
print('给定大小的单位对角矩阵：', D)
print('零填充的矩阵：', E)
print('返回0~1之间随机值的矩阵：', F)
print('返回满足正态分布的随机值的矩阵：', G)

print('=================================')
print('线性代数库')
print('=================================')
A = np.arange(0, 12).reshape([3, 4])
B = np.arange(12, 24).reshape([4, 3])
print('A为：', A)
print('B为：', B)
C = np.dot(A, B)
print('A和B的矩阵点积（行乘列求和）：', C)
C = np.vdot(A, B)
print('A和B的向量点积（对应位相乘求总和）：', C)
C = np.inner(A, A)
print('A和A的数组内积（行乘行求和）：', C)
C = np.matmul(A, B)
print('A和B的矩阵乘积（行乘列求和）：', C)
a1 = np.array([[3, 1, 1], [1, 2, 1], [4, 2, 1]])
a2 = np.array([10, 9, 15])
print('a1为：', a1)
print('a2为：', a2)
C = np.linalg.solve(a1, a2)
print('解线性矩阵方程：', C)
C = np.linalg.det(a1)
print('行列式：', C)
C = np.linalg.inv(a1)
print('逆矩阵：', C)

print('=================================')
print('IO库')
print('=================================')
np.save('a1.npy', a1)  # 将ndarray对象保存为.npy文件，为二进制文件
print('load结果为：', np.load('a1.npy'))  # 从.npy文件中获取ndarray对象
np.savetxt('a1.gz', a1)  # 将ndarray对象保存为.gz文件
print('loadtxt结果为：', np.loadtxt('a1.gz'))  # 从.txt文件中获取ndarray对象
